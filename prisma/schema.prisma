generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  icon          String?
  image         String?
  birthDate     DateTime?
  tel           String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  Account       Account[]
  Session       Session[]
  Plot          Plot[]
  Category      Category[]
  Group         Group[]
  Todo          Todo[]
  Goal          Goal[]
  Filter        Filter[]
  Tracker       Tracker[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Plot {
  id           String    @id @default(cuid())
  icon         String?
  title        String
  description  String?
  categoryId   String
  category     Category  @relation(fields: [categoryId], references: [id])
  type         String
  status       String?
  date         String?
  dueDate      DateTime?
  fieldValues  Json?
  todayRank    String?
  inboxRank    String?
  categoryRank String?

  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Todo {
  id           String    @id @default(cuid())
  icon         String?
  title        String
  description  String?
  categoryId   String
  category     Category  @relation(fields: [categoryId], references: [id])
  status       String?
  date         String?
  dueDate      DateTime?
  fieldValues  Json?
  rank         String?
  categoryRank String?
  isGoal       Boolean   @default(false)

  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Filter    Filter?  @relation(fields: [projectId], references: [id])
  projectId String?
}

model Goal {
  id          String   @id @default(cuid())
  icon        String?
  title       String
  description String?
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  date        String?
  fieldValues Json?
  rank        String?
  isActive    Boolean  @default(true)

  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tracker {
  id          String   @id @default(cuid())
  icon        String?
  title       String
  description String?
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  date        String?
  fieldValues Json?
  rank        String?
  isActive    Boolean  @default(true)

  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Filter {
  id         String    @id @default(cuid())
  icon       String?
  title      String
  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])
  filter     Json? // { field: string, condition: 'eq' | 'gt' | 'lt' | 'gte' | 'lte', target: any, operator: 'and' | 'or',  }[]
  rank       String?
  isActive   Boolean   @default(true)
  hideTodos  Boolean   @default(false)

  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Todo Todo[]
}

model Category {
  id         String  @id @default(cuid())
  icon       String
  title      String
  group      Group   @relation(fields: [groupId], references: [id])
  groupId    String
  enableTodo Boolean @default(true)
  fields     Json[]
  isDefault  Boolean
  rank       String

  Plot Plot[]

  userId    String
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Todo      Todo[]
  Goal      Goal[]
  Tracker   Tracker[]
  Filter    Filter[]
}

model Group {
  id        String  @id @default(cuid())
  title     String
  isDefault Boolean
  rank      String

  Category Category[]

  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
